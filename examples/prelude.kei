Rule Set : Type.
Rule △ : (forall (H : Set) -> Type).

Rule ≡ : (forall (A : Set) (n : (△ A)) (n' : (△ A)) -> Set).
Rule refl : (forall (A : Set) (n : (△ A)) -> (△ (≡ A n n))).

Rule nat : Set.
Rule S : (forall (_ : (△ nat)) -> (△ nat)).
Rule Z : (△ nat).

Rule False : Set.

-- by elimination of void -- 
⊥ = (\(forall (Prop : Set) (_ : (△ False)) -> (△ Prop)) | x H => [H of (△ x)]).

Rule True : Set.
Rule I : (△ True).

symmetry = (\(forall (H : Set) (x : (△ H)) (y : (△ H)) (eq : (△ (≡ H x y))) -> (△ (≡ H y x))) | h x y H =>
 [H of (△ (≡ h y x))
   |{_ x'}(refl _ x') => (refl h x')
 ]).

cong = (\(forall (H : Set)
                 (x : (△ H))
                 (y : (△ H))
                 (Prop : Set)
                 (P : (forall (_ : (△ H)) -> (△ Prop)))
                 (eq : (△ (≡ H x y)))
                 ->
                 (△ (≡ Prop (P x) (P y))))

  | h x y Prop P H => 
   [
      H of (△ (≡ Prop (P x) (P y)))
        |{_ x'}(refl _ x') => (refl Prop (P x'))
  ]).


eq_rect =  (\(forall (H : Set)
                 (x : (△ H))
                 (y : (△ H))
                 (P : (forall (_ : (△ H)) -> Set))
                 (eq : (△ (≡ H x y)))
                 (proof : (△ (P x)))
                 ->
                 (△ (P y)))

  | h x y P H proof => 
   [
      H of (△ (P y))
        |{_ x'}(refl _ x') => proof
  ]).

+ = (\(forall (n : (△ nat)) (y : (△ nat)) -> (△ nat)) | n y => [n of (△ nat)
  |{x}(S x) => (S (+ x y))
  |{}Z => y
]).


mult = (\(forall (n : (△ nat)) (y : (△ nat)) -> (△ nat)) | n y => [y of (△ nat)
  |{x}(S x) => (+ n (mult n x))
  |{}Z => Z
]).

testing = (\(forall (n : (△ nat)) (y : (△ nat)) -> (△ nat)) | n y => [y of (△ nat)
  |{x}(S x) => (mult n (testing Z Z))
  |{}Z => (S Z)
]).

pred = (\(forall (n : (△ nat)) -> (△ nat)) | n => [n of (△ nat)
  |{x}(S x) => x
  |{}Z => Z
  ]).

zero_identity_plus = (\(forall (x : (△ nat)) -> (△ (≡ nat x (+ Z x)))) | x => (refl nat x)).

zero_identity_plus' = (\(forall (x : (△ nat)) -> (△ (≡ nat x (+ x Z)))) | x => [x of (△ (≡ nat x (+ x Z)))
  |{}Z => (refl nat Z)
  |{x'}(S x') => (cong nat x' (+ x' Z) nat S (zero_identity_plus' x'))
]).

+_S = (\(forall (x : (△ nat)) (n : (△ nat)) -> (△ (≡ nat (S (+ x n)) (+ (S x) n)))) | x n => (refl nat (S (+ x n)))).

+S' =  (\(forall (x : (△ nat))
                   (n : (△ nat))
                   (x' : (△ nat))
                   (n' : (△ nat)) 
                   (H : (△ (≡ nat (+ x n) (+ x' n'))))
                   ->
                   (△ (≡ nat (+ x (S n)) (+ x' (S n'))))
                   ) | x n x' n' H => [(left_succ_nat x n) of (△ (≡ nat (+ x (S n)) (+ x' (S n'))))
                    |{t k}(refl t k) => [(left_succ_nat x' n') of (△ (≡ nat (+ x (S n)) (+ x' (S n'))))
                       |{t k}(refl t k) => (cong nat (+ x n) (+ x' n') nat S H)
                     ]
                   ]).

left_succ_nat = (\(forall (x : (△ nat)) (y : (△ nat)) -> (△ (≡ nat (+ x (S y)) (S (+ x y))))) | x y => 
  [x of (△ (≡ nat (+ x (S y)) (S (+ x y))))
    |{}Z => (refl nat (S y))
    |{x'}(S x') => (cong nat (+ x' (S y)) (S (+ x' y)) nat S (left_succ_nat x' y))
  ]).

+_com = (\(forall (x : (△ nat)) (y : (△ nat)) -> (△ (≡ nat (+ x y) (+ y x)))) | x y => 
  [x of (△ (≡ nat (+ x y) (+ y x)))
    |{}Z => [y of (△ (≡ nat (+ x y) (+ y x)))
       |{x}(S x') => [(zero_identity_plus' (S x')) of (△ (≡ nat (+ x y) (+ y x)))
          |{z _}(refl _ z) => (refl nat z)
        ]
       |{}Z => (refl nat Z)
    ]
    |{x'}(S x') => [y of (△ (≡ nat (+ x y) (+ y x)))
       |{}Z => [(zero_identity_plus' (S x')) of (△ (≡ nat (+ x y) (+ y x)))
          |{z _}(refl _ z) => (refl nat z)
        ]
       |{}(S y') => (cong nat (+ x' (S y')) (+ y' (S x')) nat S (+S' x' y' y' x' (+_com x' y')))
    ]
  ]).

injectivy_succ = (\(forall (x : (△ nat)) (y : (△ nat)) (H : (△ (≡ nat (S x) (S y)))) -> (△ (≡ nat x y))) | x y H =>
  (cong nat (S x) (S y) nat pred H)
).

injectivy_succ' = (\(forall (x : (△ nat)) (y : (△ nat)) (H : (△ (≡ nat (S x) (S y)))) -> (△ (≡ nat x y))) | x y H =>
  (eq_rect nat (S x) (S y) (succ_hypothesis x) H (refl nat x))
).

succ_hypothesis = (\(forall (x : (△ nat)) (x' : (△ nat)) -> Set) | x x' => (≡ nat x (pred x'))).

Rule Comparasion : Set.
Rule Eq : (△ Comparasion).
Rule Lt : (△ Comparasion).
Rule Gt : (△ Comparasion).

cmp' = (\(forall (x : (△ nat)) (y : (△ nat)) -> (△ Comparasion)) | x y => [x of (△ Comparasion)
   |{x'}(S x') => [y of (△ Comparasion)
     |{y'}(S y') => (cmp' x' y')
     |{}Z => Gt
   ]
   |{} Z => [y of (△ Comparasion)
     |{y'}(S y') => Lt
     |{}Z => Eq
   ]
  ]).

proof_S_cmp' = (\(forall (q : (△ nat)) (t : (△ nat)) (_ : (△ (≡ Comparasion Eq (cmp' (S q) (S t))))) ->
  (△ (≡ Comparasion Eq (cmp' q t))))
 | q t H => H).

false_≡_eq_lt = (\(forall (H : (△ (≡ Comparasion Eq Lt))) -> (△ False)) | x => 
   (eq_rect Comparasion Eq Lt (absurd_hypothesis True False False) x I)
 ).

false_≡_lt_eq = (\(forall (H : (△ (≡ Comparasion Lt Eq))) -> (△ False)) | x => 
   (eq_rect Comparasion Lt Eq (absurd_hypothesis False True False) x I)
 ).

false_≡_eq_gt = (\(forall (H : (△ (≡ Comparasion Eq Gt))) -> (△ False)) | x => 
   (eq_rect Comparasion Eq Gt (absurd_hypothesis True False False) x I)
 ).

absurd_hypothesis = (\(forall (x : Set) (y : Set) (z : Set) (_ : (△ Comparasion)) -> Set) | i i' i'' v  => [
  v of Set 
    |{}Eq => i
    |{}Lt => i'
    |{}Gt => i''
 ]).

absurd_0_eq = (\(forall (x : (△ nat)) (H : (△ (≡ nat (S x) Z))) -> (△ False)) | x H  => 
   (eq_rect nat (S x) Z (absurd_succ_hypothesis True False) H I)
).

absurd_S_eq = (\(forall (x : (△ nat)) (H : (△ (≡ nat (S x) x))) -> (△ False)) | x H  => [x of (△ False)]).

absurd_succ_hypothesis = (\(forall (x : Set) (y : Set) (n : (△ nat)) -> Set) | x y n => [
  n of Set 
    |{x'}(S x') => x
    |{}Z => y
 ]).

f_succ' = (\(forall
               (x : (△ nat))
               (y : (△ nat))
               (H : (△ (≡ nat x y)))
               -> (△ (≡ nat (S x) (S y))))
          | x y H => (cong nat x y nat S H)).
              
proof_eq_impl_refl = (\(forall (x0 : (△ nat)) (y0 : (△ nat)) (H : (△ (≡ Comparasion Eq (cmp' x0 y0)))) -> (△ (≡ nat x0 y0)))
 | x y H => 
 [x of (△ (≡ nat x y))
    | {}Z => [y of (△ (≡ nat x y))
               | {y'}(S y') => (⊥ (≡ nat x y) (false_≡_eq_lt H))
               | {}Z => (refl nat Z)
    ]
    | {x'}(S x') => [y of (△ (≡ nat x y))
         | {y'}(S y') => (f_succ' x' y' (proof_eq_impl_refl x' y' (proof_S_cmp' x' y' H)))
         | {}Z => (⊥ (≡ nat x y) (false_≡_eq_gt H))
    ]
 ]).

Rule Vector : (forall (A : Set) (x : (△ nat)) -> Set).
Rule nil : (forall (A : Set) -> (△ (Vector A Z))).
Rule cons : (forall (A : Set) (x : (△ nat)) (y : (△ A)) (H : (△ (Vector A x))) -> (△ (Vector A (S x)))).

concat = (\(forall (A : Set) (x : (△ nat)) (y : (△ nat)) (v : (△ (Vector A x))) (v' : (△ (Vector A y))) -> (△ (Vector A (+ x y))))
   |a x y v v' => [v of (△ (Vector a (+ x y)))
      |{_ n t xs}(cons _ n t xs) => (cons a (+ n y) t (concat a n y xs v'))
      |{_}(nil _) => v'
]).

-- Kei supports impossible clause through dependent pattern matching, once the unification algorithms try to unify with the --
-- destructed product and the clause, Kei generates explosions absurds --
-- For example, a sized list with at least one of length can generates the goal S n = Z, if you try match a empty list --
-- if you have Z = S n, so by congruence every P predicate that holds Z also holds S n, trivially an absurd --

head = (\(forall (A : Set) (x : (△ nat)) (v : (△ (Vector A (S x)))) -> (△ A))
   |a x v => [v of (△ a)
      |{_ n t xs}(cons _ n t xs) => t
      |{_}(nil _) => (⊥ a (eq_rect nat (S x) (S x) (absurd_succ_hypothesis True False) (refl nat Z) I))]).

cdr = (\(forall (A : Set) (x : (△ nat)) (v : (△ (Vector A (S x)))) -> (△ (Vector A x)))
   |a x v => [v of (△ (Vector a x))
      |{_ n t xs}(cons _ n t xs) => xs
      |{_}(nil _) => (⊥ (Vector a x) (eq_rect nat (S x) (S x) (absurd_succ_hypothesis True False) (refl nat Z) I))
    ]).

-- You may notice that the arguments orders of absurd_succ_hypothesis doesn't matter this is essencially cause' Kei try to --
-- check first the arguments without normalization, for the sake of optimization, however this weired behavouir happens when you derive --
-- an absurd, At glance, it doesn't seems be a problem --

Rule le : (forall (x : (△ nat)) (y : (△ nat)) -> Set).
Rule le_n : (forall (n : (△ nat)) -> (△ (le n n))).
Rule le_S : (forall (n : (△ nat)) (n' : (△ nat)) (le' : (△ (le n n'))) -> (△ (le n (S n')))).

no_natural_is_less_than_0 = (\(forall (x : (△ nat)) -> (△ (le Z x))) | x => [
  x of (△ (le Z x))
    |{x'}(S x') => (le_S Z x' (no_natural_is_less_than_0 x'))
    |{}Z => (le_n Z)
]).

no_natural_is_less_than_0' = (\(forall (x : (△ nat)) (H : (△ (le (S x) Z))) -> (△ False)) | x H =>
 [H of (△ False)
   |{n}(le_n n) => (absurd_0_eq x (refl nat Z))
   |{h H'}(le_S Z k H') => (absurd_0_eq x (refl nat Z))
   |{n k H'}(le_S (S n) k H') => (no_natural_is_less_than_0' n (le_S (S n) k H'))
]).

pred_le = (\(forall (x : (△ nat)) (y : (△ nat)) (H : (△ (le (S x) (S y)))) -> (△ (le x y))) | x y H => [
  H of (△ (le x y))
    |{n}(le_n (S k)) => (le_n k) 
    |{}(le_n Z) => (⊥ (le x y) (absurd_0_eq x (refl nat Z)))
    |{k k' H'}(le_S (S k) (S k') H') => (le_S k k' (pred_le k k' H'))
    |{k H'}(le_S Z Z H') => (⊥ (le x y) (absurd_0_eq x (refl nat Z)))
]).

Rule Ǝ : (forall (A : Set) (P : (forall (e : (△ A)) -> Set)) -> Set).
Rule exists : (forall (A : Set) (P : (forall (e : (△ A)) -> Set)) (I : (△ A)) (H : (△ (P I))) -> (△ (Ǝ A P))).

forall_ihabitant_type = (\(forall 
                               (A : Set)
                               (P : (forall (a : (△ A)) -> Set))
                               (H : (forall (a : (△ A)) -> (△ (P a))))  
                               (I : (△ A))
                               ->
                               (△ (Ǝ A P)))
                          | a p h i => (exists a p i (h i))
).

succ_e = (\(forall (n : (△ nat)) (m : (△ nat)) -> Set) | n m => (≡ nat m (S n))).
succ_proof = (\(forall (n : (△ nat)) -> (△ (≡ nat (S n) (S n)))) | n => (refl nat (S n))).
always_N_successor = (\(forall (n : (△ nat)) -> (△ (Ǝ nat (succ_e n)))) | n => (exists nat (succ_e n) (S n) (succ_proof n))).

Rule fin : (forall (n : (△ nat)) -> Set).
Rule zero : (forall (n : (△ nat)) -> (△ (fin (S n)))).
Rule succ : (forall (n : (△ nat)) (fin' : (△ (fin n))) -> (△ (fin (S n)))).

inj_vec = (\(forall (A : Set) (x : (△ nat)) (v : (△ (Vector A x))) -> (△ nat))
   |a x v => x).

inj_fin = (\(forall (x : (△ nat)) (v : (△ (fin x))) -> (△ nat))
   |x v => x).

fin_Z = (\(forall (v : (△ (fin Z))) -> (△ False))
   |x => [x of (△ False)
     |{n}(zero n) => (⊥ False (eq_rect nat Z Z (absurd_succ_hypothesis True False) (refl nat (S n)) I))
     |{y n}(succ n y) => (⊥ False (eq_rect nat Z Z (absurd_succ_hypothesis True False) (refl nat (S n)) I))
   ]).

get = (\(forall (A : Set) (len : (△ nat)) (f : (△ (fin len))) (v : (△ (Vector A len))) -> (△ A)) 
    | a l f v => [f of (△ a)
      |{n}(zero n) => [v of (△ a)
        |{_}(nil _) => (⊥ a (fin_Z f))
        |{_ n t xs}(cons _ n t xs) => t
    ]
     |{n y}(succ n y) => (get a n y (cdr a n v))
]).

set = (\(forall (A : Set) (len : (△ nat)) (f : (△ (fin len))) (y : (△ A)) (v : (△ (Vector A len))) -> (△ (Vector A len))) 
    | a l f y v => [f of (△ (Vector a l))
      |{n}(zero n) => [v of (△ (Vector a l))
        |{_}(nil _) => (⊥ (Vector a l) (fin_Z f))
        |{_ n t xs}(cons _ n t xs) => (cons _ n y xs)
    ]
     |{n y'}(succ n y') => (cons a n (head a n v) (set a n y' y (cdr a n v)))
]).

replace_vec_conservation =  
  (\(forall 
      (A : Set) 
      (len : (△ nat)) 
      (f : (△ (fin len)))
      (y : (△ A))
      (v : (△ (Vector A len)))
       -> (△ (≡ A (get A len f (set A len f y v)) y)))
  | a len f y v => [f of (△ (≡ a (get a len f (set a len f y v)) y))
     |{n}(zero n) => [v of (△ (≡ a (get a len f (set a len f y v)) y))
        |{_}(nil _) => (⊥ (≡ a (get a len f (set a len f y v)) y) (fin_Z f))
        |{_ n t xs}(cons _ n t xs) => (refl a y)
    ]
     |{n y'}(succ n y') => (replace_vec_conservation a n y' y (cdr a n v))
    
  ]).

leb_lt' = (\(forall (n : (△ nat)) (n' : (△ nat)) (H : (△ (le (S n) n'))) -> (△ (le n n'))) | n n' H => [n of (△ (le n n'))
  |{}Z => [n' of (△ (le n n'))
     |{}(S x) => (no_natural_is_less_than_0 (S x))
     |{}Z => (le_n Z)
  ]
  |{x'}(S x') => [n' of (△ (le n n'))
     |{x}(S x) => (le_S (S x') x (pred_le (S x') x H))
     |{}Z => (⊥ (le n n') (no_natural_is_less_than_0' (S x') H))
  ]
]).

of_nat_lt = (\(forall (n : (△ nat)) (n' : (△ nat)) (H : (△ (le (S n) n'))) -> (△ (fin n'))) | n n' H => [
  H of (△ (fin n'))
    |{n}(le_n n) => (zero n) 
    |{x y H'}(le_S (S x) y H') => (succ y (of_nat_lt x y H'))
    |{x y H'}(le_S Z y H') => (⊥ (fin n') (absurd_0_eq n (refl nat Z)))
]).

#EVAL : Type.