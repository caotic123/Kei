Rule Set : Type.
Rule △ : (forall (H : Set) -> Type).

Rule ≡ : (forall (A : Set) (n : (△ A)) (n' : (△ A)) -> Set).
Rule refl : (forall (A : Set) (n : (△ A)) -> (△ (≡ A n n))).

Rule nat : Set.
Rule S : (forall (_ : (△ nat)) -> (△ nat)).
Rule Z : (△ nat).

Rule False : Set.
Rule ⊥ : (forall (Prop : Set) (_ : (△ False)) -> (△ Prop)).

Rule True : Set.
Rule I : (△ True).

symmetry = (\(forall (H : Set) (x : (△ H)) (y : (△ H)) (eq : (△ (≡ H x y))) -> (△ (≡ H y x))) | h x y H =>
 [H of (△ (≡ h y x))
   |{_ x'}(refl _ x') => (refl h x')
 ]).

cong = (\(forall (H : Set)
                 (x : (△ H))
                 (y : (△ H))
                 (Prop : Set)
                 (P : (forall (_ : (△ H)) -> (△ Prop)))
                 (eq : (△ (≡ H x y)))
                 ->
                 (△ (≡ Prop (P x) (P y))))

  | h x y Prop P H => 
   [
      H of (△ (≡ Prop (P x) (P y)))
        |{_ x'}(refl _ x') => (refl Prop (P x'))
  ]).


eq_rect =  (\(forall (H : Set)
                 (x : (△ H))
                 (y : (△ H))
                 (P : (forall (_ : (△ H)) -> Set))
                 (eq : (△ (≡ H x y)))
                 (proof : (△ (P x)))
                 ->
                 (△ (P y)))

  | h x y P H proof => 
   [
      H of (△ (P y))
        |{_ x'}(refl _ x') => proof
  ]).

add = (\(forall (n : (△ nat)) (y : (△ nat)) -> (△ nat)) | n y => [n of (△ nat)
  |{x}(S x) => (S (add x y))
  |{}Z => y
]).

pred = (\(forall (n : (△ nat)) -> (△ nat)) | n => [n of (△ nat)
  |{x}(S x) => (pred x) 
  |{}Z => Z
  ]).

zero_identity_plus = (\(forall (x : (△ nat)) -> (△ (≡ nat x (add Z x)))) | x => (refl nat x)).
pred_refl = (\(forall (x : (△ nat)) (y : (△ nat)) (H : (△ (≡ nat (pred (S x)) (pred (S y))))) -> (△ (≡ nat (pred x) (pred y))))
   | x y H => H).

Rule Comparasion : Set.
Rule Eq : (△ Comparasion).
Rule Lt : (△ Comparasion).
Rule Gt : (△ Comparasion).

cmp' = (\(forall (x : (△ nat)) (y : (△ nat)) -> (△ Comparasion)) | x y => [x of (△ Comparasion)
   |{x'}(S x') => [y of (△ Comparasion)
     |{y'}(S y') => (cmp' x' y')
     |{}Z => Gt
   ]
   |{} Z => [y of (△ Comparasion)
     |{y'}(S y') => Lt
     |{}Z => Eq
   ]
  ]).

proof_S_cmp' = (\(forall (q : (△ nat)) (t : (△ nat)) (_ : (△ (≡ Comparasion Eq (cmp' (S q) (S t))))) ->
  (△ (≡ Comparasion Eq (cmp' q t))))
 | q t H => H).

false_≡_eq_lt = (\(forall (H : (△ (≡ Comparasion Eq Lt))) -> (△ False)) | x => 
   (eq_rect Comparasion Eq Lt (absurd_hypothesis True False False) x I)
 ).

false_≡_lt_eq = (\(forall (H : (△ (≡ Comparasion Lt Eq))) -> (△ False)) | x => 
   (eq_rect Comparasion Lt Eq (absurd_hypothesis False True False) x I)
 ).

false_≡_eq_gt = (\(forall (H : (△ (≡ Comparasion Eq Gt))) -> (△ False)) | x => 
   (eq_rect Comparasion Eq Gt (absurd_hypothesis True False False) x I)
 ).

absurd_hypothesis = (\(forall (x : Set) (y : Set) (z : Set) (_ : (△ Comparasion)) -> Set) | i i' i'' v  => [
  v of Set 
    |{}Eq => i
    |{}Lt => i'
    |{}Gt => i''
 ]).

absurd_0_eq = (\(forall (x : (△ nat)) (H : (△ (≡ nat (S x) Z))) -> (△ False)) | x H  => 
   (eq_rect nat (S x) Z (absurd_succ_hypothesis True False) H I)
).

absurd_succ_hypothesis = (\(forall (x : Set) (y : Set) (n : (△ nat)) -> Set) | x y n => [
  n of Set 
    |{x'}(S x') => x
    |{}Z => y
 ]).

f_succ' = (\(forall
               (x : (△ nat))
               (y : (△ nat))
               (H : (△ (≡ nat x y)))
               -> (△ (≡ nat (S x) (S y))))
          | x y H => (cong nat x y nat S H)).
              
proof_eq_impl_refl = (\(forall (x0 : (△ nat)) (y0 : (△ nat)) (H : (△ (≡ Comparasion Eq (cmp' x0 y0)))) -> (△ (≡ nat x0 y0)))
 | x y H => 
 [x of (△ (≡ nat x y))
    | {}Z => [y of (△ (≡ nat x y))
               | {y'}(S y') => (⊥ (≡ nat x y) (false_≡_eq_lt H))
               | {}Z => (refl nat Z)
    ]
    | {x'}(S x') => [y of (△ (≡ nat x y))
         | {y'}(S y') => (f_succ' x' y' (proof_eq_impl_refl x' y' (proof_S_cmp' x' y' H)))
         | {}Z => (⊥ (≡ nat x y) (false_≡_eq_gt H))
    ]
 ]).

Rule Vector : (forall (A : Set) (x : (△ nat)) -> Set).
Rule nil : (forall (A : Set) -> (△ (Vector A Z))).
Rule cons : (forall (A : Set) (x : (△ nat)) (y : (△ A)) (H : (△ (Vector A x))) -> (△ (Vector A (S x)))).

concat = (\(forall (A : Set) (x : (△ nat)) (y : (△ nat)) (v : (△ (Vector A x))) (v' : (△ (Vector A y))) -> (△ (Vector A (add x y))))
   |a x y v v' => [v of (△ (Vector a (add x y)))
      |{_ n t xs}(cons _ n t xs) => (cons a (add n y) t (concat a n y xs v'))
      |{_}(nil _) => v'
]).

head = (\(forall (A : Set) (x : (△ nat)) (y : (△ nat)) (v : (△ (Vector A (S x)))) -> (△ nat))
   |a x y v => [v of (△ nat)
      |{_ n t xs}(cons _ n t xs) => (S Z)
      |{_}(nil _) => Z
]).

Rule le : (forall (x : (△ nat)) (y : (△ nat)) -> Set).
Rule le_n : (forall (n : (△ nat)) -> (△ (le n n))).
Rule le_S : (forall (n : (△ nat)) (n' : (△ nat)) (le' : (△ (le n n'))) -> (△ (le n (S n')))).

no_natural_is_less_than_0 = (\(forall (x : (△ nat)) -> (△ (le Z x))) | x => [
  x of (△ (le Z x))
    |{x'}(S x') => (le_S Z x' (no_natural_is_less_than_0 x'))
    |{}Z => (le_n Z)
]).
